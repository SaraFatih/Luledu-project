package com.luledu.client.gui;

import org.lwjgl.input.Keyboard;
import org.lwjgl.opengl.GL11;















import com.google.common.base.Splitter;
import com.luledu.blocks.BlockBook;
import com.luledu.edumod.AddAssignment;
import com.luledu.edumod.EduMod;
import com.luledu.edumod.ModBlocks;

import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiButton;
import net.minecraft.client.gui.GuiScreen;
import net.minecraft.client.resources.I18n;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.util.ResourceLocation;
import net.minecraft.world.World;

public class BookGui extends GuiScreen{

	public final int bookImageHeight = 192;
    public final int bookImageWidth = 192;
    public int currPage=0;
    public static int bookTotalPages;
    public static ResourceLocation[] bookPageTextures; 
	public String[] stringPageText;
	public GuiButton buttonDone;
	public NextPageButton buttonNextPage;
	public NextPageButton buttonPreviousPage;
	public int countPages =0; 

	public BookGui(String assignment) {
		
	
		int assignmentLength = assignment.length();
		System.out.println("assignment length: "+assignmentLength);
		int charactersPerPage = 260;
		int numberOfPages;
		numberOfPages=( (int) (assignmentLength/ charactersPerPage) ) + 1;
		bookTotalPages = numberOfPages+1;
		System.out.println("number of pages:"+numberOfPages);
		bookPageTextures = new ResourceLocation[bookTotalPages];
		stringPageText = new String[bookTotalPages];
		bookPageTextures[0] = new ResourceLocation(EduMod.MODID+":textures/gui/book_cover.png");
		stringPageText[0] = "";
		if(assignmentLength>charactersPerPage){

			int i=1;
			
			for(final String assignmentPart : Splitter.fixedLength(260).split(assignment)){
				if(i<=numberOfPages){
			    System.out.println("assignment part "+ i + "*****"+assignmentPart);
			    System.out.println(i);
			    bookPageTextures[i] = new ResourceLocation(EduMod.MODID+":textures/gui/book.png");
			    stringPageText[i]=assignmentPart;
			    System.out.println("stringPageText["+i+"]"+stringPageText[i]);
			    i++;
				}	
			}
		}
	}

	@Override
    public void initGui(){
     
        buttonList.clear();
        Keyboard.enableRepeatEvents(true);

        buttonDone = new GuiButton(0, width / 2 + 2, 4 + bookImageHeight, 
              98, 20, I18n.format("gui.done", new Object[0]));
  
        buttonList.add(buttonDone);
        int offsetFromScreenLeft = (width - bookImageWidth) / 2;
        buttonList.add(buttonNextPage = new NextPageButton(1, 
              offsetFromScreenLeft + 120, 156, true));
        buttonList.add(buttonPreviousPage = new NextPageButton(2, 
              offsetFromScreenLeft + 38, 156, false));
    }

	 @Override
	    public void updateScreen() 
	    {
	        buttonDone.visible = (currPage == bookTotalPages - 1);
	        buttonNextPage.visible = (currPage < bookTotalPages - 1);
	        buttonPreviousPage.visible = currPage > 0;
	    }
	 
	 @Override
	    public void drawScreen(int parWidth, int parHeight, float p_73863_3_)
	    {
		 Minecraft mc = Minecraft.getMinecraft();
	    	
	        GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
	        if (currPage == 0)
	     {
	         mc.getTextureManager().bindTexture(bookPageTextures[0]);
	     }
	        else
	        {
	         mc.getTextureManager().bindTexture(bookPageTextures[1]);
	        }
	        int offsetFromScreenLeft = (width - bookImageWidth ) / 2;
	        drawTexturedModalRect(offsetFromScreenLeft, 2, 0, 0, bookImageWidth, 
	              bookImageHeight);
	        int widthOfString;
	        String stringPageIndicator = I18n.format("book.pageIndicator", 
	              new Object[] {Integer.valueOf(currPage + 1), bookTotalPages});
	        widthOfString = fontRendererObj.getStringWidth(stringPageIndicator);
	        fontRendererObj.drawString(stringPageIndicator, 
	              offsetFromScreenLeft - widthOfString + bookImageWidth - 44, 
	              18, 0);
	        fontRendererObj.drawSplitString(stringPageText[currPage], 
	              offsetFromScreenLeft + 36, 34, 116, 0);
	        super.drawScreen(parWidth, parHeight, p_73863_3_);

	    }
	 
	 @Override
	    protected void mouseClickMove(int parMouseX, int parMouseY, 
	          int parLastButtonClicked, long parTimeSinceMouseClick) 
	    {
	     
	    }

	    @Override
	    protected void actionPerformed(GuiButton parButton) 
	    {
	    	 Minecraft mc = Minecraft.getMinecraft();
	     if (parButton == buttonDone)
	     {
	         // You can send a packet to server here if you need server to do 
	         // something
	    	 EntityPlayer player = mc.thePlayer;
	    	 World world = mc.theWorld;
	    	 world.setBlock(player.getLookVec().xCoord + 5, player.getLookVec().yCoord + 5, player.getLookVec().zCoord + 5, p_147449_4_)
	         mc.displayGuiScreen((GuiScreen)null);
	     }
	        else if (parButton == buttonNextPage)
	        {
	            if (currPage < bookTotalPages - 1)
	            {
	                ++currPage;
	            }
	        }
	        else if (parButton == buttonPreviousPage)
	        {
	            if (currPage > 0)
	            {
	                --currPage;
	            }
	        }
	   }

	    @Override
	    public void onGuiClosed() 
	    {
	     
	    }
	 
	    @Override
	    public boolean doesGuiPauseGame()
	    {
	        return true;
	    }
	
	    
	    @SideOnly(Side.CLIENT)
	    static class NextPageButton extends GuiButton
	    {
	        private final boolean isNextButton;

	        public NextPageButton(int parButtonId, int parPosX, int parPosY, 
	              boolean parIsNextButton)
	        {
	            super(parButtonId, parPosX, parPosY, 23, 13, "");
	            isNextButton = parIsNextButton;
	        }

	        /**
	         * Draws this button to the screen.
	         */
	        @Override
	        public void drawButton(Minecraft mc, int parX, int parY)
	        {
	            if (visible)
	            {
	                boolean isButtonPressed = (parX >= xPosition 
	                      && parY >= yPosition 
	                      && parX < xPosition + width 
	                      && parY < yPosition + height);
	                GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
	                mc.getTextureManager().bindTexture(bookPageTextures[1]);
	                int textureX = 0;
	                int textureY = 192;

	                if (isButtonPressed)
	                {
	                    textureX += 23;
	                }

	                if (!isNextButton)
	                {
	                    textureY += 13;
	                }

	                drawTexturedModalRect(xPosition, yPosition, 
	                      textureX, textureY, 
	                      23, 13);
	            }
	        }
	    }
	
	
	
}

